<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>programming | Denis Trofimov&#39;s Blog</title>
    <link>https://denis-trofimov.github.io/tags/programming/</link>
      <atom:link href="https://denis-trofimov.github.io/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    <description>programming</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© All rights reserved - 2020</copyright><lastBuildDate>Fri, 28 Sep 2018 19:12:58 +0000</lastBuildDate>
    <image>
      <url>https://denis-trofimov.github.io/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>programming</title>
      <link>https://denis-trofimov.github.io/tags/programming/</link>
    </image>
    
    <item>
      <title>How dictionaries are implemented in the Python language</title>
      <link>https://denis-trofimov.github.io/how-dictionaries-are-implemented-in-the-python-language/</link>
      <pubDate>Fri, 28 Sep 2018 19:12:58 +0000</pubDate>
      <guid>https://denis-trofimov.github.io/how-dictionaries-are-implemented-in-the-python-language/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Dictionaries are indexed by keys and they can be seen as associative arrays. Let’s add 3 key/value pairs to a dictionary:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;}
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; d[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; d
{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The values can be accessed this way:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; d[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;]
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; d[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;]
&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; d[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;]
&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; d[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;]
Traceback (most recent call last):
  File &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;&lt;/span&gt;, line &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;module&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;KeyError&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The key ‘d’ does not exist so a KeyError exception is raised.&lt;/p&gt;
&lt;h2 id=&#34;hash-tables&#34;&gt;Hash tables&lt;/h2&gt;
&lt;p&gt;Python dictionaries are implemented using hash tables. It is an array whose indexes are obtained using a hash function on the keys. The goal of a hash function is to distribute the keys evenly in the array. A good hash function minimizes the number of collisions e.g. different keys having the same hash. Python does not have this kind of hash function. Its most important hash functions (for strings and ints) are very regular in common cases:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; map(hash, (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;))
[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; map(hash, (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;namea&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nameb&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;namec&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;named&amp;#34;&lt;/span&gt;))
[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1658398457&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1658398460&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1658398459&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1658398462&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We are going to assume that we are using strings as keys for the rest of this post. The hash function for strings in Python is defined as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;arguments: string object
returns: hash
function string_hash:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; hash cached:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; it
    set len to string&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s length&lt;/span&gt;
    initialize var p pointing to &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;st char of string object
    set x to value pointed by p left shifted by &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; bits
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; len &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        set var x to (&lt;span style=&#34;color:#ae81ff&#34;&gt;1000003&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; x) xor value pointed by p
        increment pointer p
    set x to x xor length of string object
    cache x &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; the hash so we don&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t need to calculate it again&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; the hash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you run hash(‘a’) in Python, it will execute string_hash() and return 12416037344. Here we assume we are using a 64-bit machine.&lt;/p&gt;
&lt;p&gt;If an array of size x is used to store the key/value pairs then we use a mask equal to x-1 to calculate the slot index of the pair in the array. This makes the computation of the slot index fast. The probability to find an empty slot is high due to the resizing mechanism described below. This means that having a simple computation makes sense in most of the cases. If the size of the array is 8, the index for ‘a’ will be: hash(‘a’) &amp;amp; 7 = 0. The index for ‘b’ is 3, the index for ‘c’ is 2, the index for ‘z’ is 3 which is the same as ‘b’, here we have a collision.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;j) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; perturb;
perturb &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; PERTURB_SHIFT;
use j &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;i as the next table index;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
  Py_ssize_t me_hash;
  PyObject &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;me_key;
  PyObject &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;me_value;
} PyDictEntry;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; _dictobject PyDictObject;
&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; _dictobject {
    PyObject_HEAD
    Py_ssize_t ma_fill;
    Py_ssize_t ma_used;
    Py_ssize_t ma_mask;
    PyDictEntry &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ma_table;
    PyDictEntry &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ma_lookup)(PyDictObject &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;mp, PyObject &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;key, &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; hash);
    PyDictEntry ma_smalltable[PyDict_MINSIZE];
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;dictionary-initialization&#34;&gt;Dictionary initialization&lt;/h2&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;returns new dictionary object
function PyDict_New:
    allocate new dictionary object
    clear dictionary&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;s table
    set dictionary&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;s number of used slots &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dummy slots (ma_fill) to &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    set dictionary&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;s number of active slots (ma_used) to &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    set dictionary&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;s mask (ma_value) to dictionary size &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
    set dictionary&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;s lookup function to lookdict_string
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; allocated dictionary object
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;arguments: dictionary, key, value
returns: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; OK &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
function PyDict_SetItem:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; key&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s hash cached:&lt;/span&gt;
        use hash
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        calculate hash
    call insertdict &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; dictionary object, key, hash &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; value
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; key&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;value pair added successfully &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; capacity over &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:
        call dictresize to resize dictionary&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s table&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;</description>
    </item>
    
    <item>
      <title>Getting Mob Programming Buy-In at Your Organization</title>
      <link>https://denis-trofimov.github.io/getting-mob-programming-buy-in-at-your-organization/</link>
      <pubDate>Fri, 14 Sep 2018 22:17:50 +0000</pubDate>
      <guid>https://denis-trofimov.github.io/getting-mob-programming-buy-in-at-your-organization/</guid>
      <description>&lt;p&gt;Repost of &lt;!-- raw HTML omitted --&gt;&lt;a href=&#34;https://simpleprogrammer.com/mob-programming/&#34;&gt;https://simpleprogrammer.com/mob-programming/&lt;/a&gt;.&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://spzone-simpleprogrammer.netdna-ssl.com/wp-content/uploads/2018/09/mod-square.png&#34; alt=&#34;This piece was a collaboration written by Nate Wixom and Torrey Powell.&#34; title=&#34;This piece was a collaboration written by Nate Wixom and Torrey Powell.&#34;&gt;&lt;/p&gt;
&lt;p&gt;Mob programming is the best approach for many development applications. Mob projects result in a more finished project at release, with fewer bugs. By focusing on one project at a time, teams can complete projects more efficiently, and those projects are higher quality, requiring fewer revisions.&lt;/p&gt;
&lt;p&gt;The Project Management Institute’s &lt;!-- raw HTML omitted --&gt;2017 Pulse of the Profession&lt;!-- raw HTML omitted --&gt; survey reports that 71 percent of organizations now use &lt;!-- raw HTML omitted --&gt;agile methods&lt;!-- raw HTML omitted --&gt; to complete projects. Included among agile approaches is mob programming, &lt;!-- raw HTML omitted --&gt;defined by the Agile Alliance&lt;!-- raw HTML omitted --&gt; as “a software development approach where the whole team works on the same thing, at the same time, in the same space, and at the same computer.” Picture multiple engineers at one station working collaboratively on one project.&lt;/p&gt;
&lt;p&gt;While many organizations have adopted mob programming as a core part of their development skill set, not all development organizations have bought in.&lt;/p&gt;
&lt;p&gt;Still, to implement mob programming successfully, you need buy-in from two important groups at your organization—the executive team and the programmers themselves.&lt;/p&gt;
&lt;p&gt;By following the strategies below, you can get organization buy-in for mob programming from top to bottom and start using this agile development methodology to provide superior finished products for clients both inside and outside your organization.&lt;/p&gt;
&lt;h2 id=&#34;getting-buy-in-from-leadership&#34;&gt;Getting Buy-in From Leadership&lt;/h2&gt;
&lt;p&gt;As far back as 2000, the benefits of developers teaming up on projects to solve problems have been evaluated against the performance of individuals. An oft-cited &lt;!-- raw HTML omitted --&gt;joint study&lt;!-- raw HTML omitted --&gt; between the University of North Carolina and the University of Utah showed that paired programmers were 15 percent more successful in solving problems and that their solutions did so with fewer lines of code.&lt;/p&gt;
&lt;p&gt;That may not be an impressive enough statistic for senior leadership, however. Shouldn’t it be at least 100 percent more efficient in order to be cost-effective?&lt;/p&gt;
&lt;p&gt;The truth of the matter is that such small efficiency gains in the short run may not be convincing. It’s a long game, and you’ll need to open leadership’s eyes to the possibilities of multiple projects spanning months, even years.&lt;/p&gt;
&lt;p&gt;If you can get leadership to agree to a six- to 12-month trial for mob programming, here are some of the benefits your organization will see:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Fully inventoried projects:&lt;/strong&gt; With groups working more thoroughly and quickly on fewer projects, projects are less likely to be abandoned or forgotten, and more projects are fully completed. More eyes on every project means projects are more complete when they are released to the world.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Shorter turnaround on projects:&lt;/strong&gt; Projects are completed quicker than when worked on by individual developers. With more eyes on each project, roadblocks are more easily overcome, and solutions to problems can quickly be brainstormed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fewer issues in live projects:&lt;/strong&gt; As the projects are fully inventoried with more people reviewing every line of code, fewer bugs make it to the production environment. With individual developers working on projects, it’s often understood that there will be bugs that need to be fixed while a platform is live. You can eliminate a lot of this necessary rework through mob programming.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Quicker onboarding for programmers:&lt;/strong&gt; Onboarding into a mob programming environment is more efficient, as you can drop new developers right into a mob that’s already at work on a project and get them contributing immediately rather than having to divert resources for training and management of new programmers’ early projects with your organization.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Over time, mob programming improves efficiency not only in the completion of successful projects but also in the integration of &lt;!-- raw HTML omitted --&gt;new team members&lt;!-- raw HTML omitted --&gt;. You may not see the return on investment right away, but over time, it will be evident.&lt;/p&gt;
&lt;p&gt;Better results, faster, with fewer abandoned projects—that’s something any senior leader can get behind.&lt;/p&gt;
&lt;h2 id=&#34;getting-buy-in-from-programmers-developers-and-engineers&#34;&gt;Getting Buy-in From Programmers, Developers, and Engineers&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://spzone-simpleprogrammer.netdna-ssl.com/wp-content/uploads/2018/09/team-work.png&#34; alt=&#34;Getting buy-in from senior leadership is one thing. Getting buy-in from the people who will actually be doing the mob programming is something else entirely.&#34; title=&#34;Getting buy-in from senior leadership is one thing. Getting buy-in from the people who will actually be doing the mob programming is something else entirely.&#34;&gt;&lt;/p&gt;
&lt;p&gt;Many engineers, developers, and programmers are used to &lt;!-- raw HTML omitted --&gt;working alone&lt;!-- raw HTML omitted --&gt;—putting on the headphones and sitting down to crank out code, cut off from the outside world, for hours at a time. How do you get people who are used to working alone to be active participants in a group environment where the major reason for increased success is teamwork?&lt;/p&gt;
&lt;p&gt;In our experience, having gone through many iterations of mob programming while integrating it into the organization at Clearlink, not everyone is a good fit for mob programming—but many more than you would expect actually are, once they are involved.&lt;/p&gt;
&lt;p&gt;Why is that? Believe it or not, engineers like socializing with their colleagues, they just haven’t always had the chance to do so. Once they realize the level of engagement and the quality of code that is created while working collaboratively, job satisfaction increases, learning increases, and enhanced team bonding occurs. Mob programming is also a meritocracy where the best idea wins, and everyone in the mob has an equal voice—from the most senior developer on the team down to the newest arrival.&lt;/p&gt;
&lt;p&gt;Each mob contains two roles: &lt;em&gt;the driver&lt;/em&gt; and &lt;em&gt;the navigator(s)&lt;/em&gt;. The driver sits at the computer, inputting the code, while the navigators tell the driver what to type. These roles switch in the mob at regular eight to 15-minute intervals, giving everyone an equal chance to drive and to navigate.&lt;/p&gt;
&lt;p&gt;Everyone remains actively involved in the process, with ideas being shared and implemented quickly. Since everyone gets a chance to navigate, junior programmers gain confidence by asserting their ideas.&lt;/p&gt;
&lt;p&gt;We recommend, either at the completion of a project or at the end of each workweek, recognizing mob team members for their contributions to the project(s) they have worked on. Also, allow programmers to share what they learned and what they had trouble with. After a few projects and a few of these recognition and retrospective meetings, your team members will be comfortable working together and fully integrated into the mob programming mindset.&lt;/p&gt;
&lt;h2 id=&#34;making-the-jump&#34;&gt;Making the Jump&lt;/h2&gt;
&lt;p&gt;Changing development work from an individual to a mob programming style can be a big leap—one that can result in a few stumbles along the way. But once you get buy-in from leadership for a trial and can get some programmers on board, you’ll see &lt;!-- raw HTML omitted --&gt;how it can benefit your organization&lt;!-- raw HTML omitted --&gt;.&lt;/p&gt;
&lt;p&gt;We’ve given you some navigation—so get ready to drive.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://flic.kr/p/nYis2p&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Photo&lt;/a&gt; by &lt;!-- raw HTML omitted --&gt;Georgia National Guard&lt;!-- raw HTML omitted --&gt; CC 2.0&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Review of Kevlin Henney`s talk Seven Ineffective Coding Habits of Many Programmers</title>
      <link>https://denis-trofimov.github.io/review-of-kevlin-henneys-talk-seven-ineffective-coding-habits-of-many-programmers/</link>
      <pubDate>Sun, 09 Sep 2018 20:03:20 +0000</pubDate>
      <guid>https://denis-trofimov.github.io/review-of-kevlin-henneys-talk-seven-ineffective-coding-habits-of-many-programmers/</guid>
      <description>&lt;h1 id=&#34;review-of-kevlin-henneys-talk-seven-ineffective-coding-habits-of-many-programmers&#34;&gt;Review of Kevlin Henney`s talk Seven Ineffective Coding Habits of Many Programmers&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;I watched this video from the start till the end.&lt;/em&gt;
&lt;em&gt;I see this coding habits very often.&lt;/em&gt;
&lt;em&gt;I fought unsustainable spacing the wrong way in the past.&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;kevlin-henneys-talk-video-description&#34;&gt;Kevlin Henney`s talk video description&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Habits help you manage the code complexity. You apply existing skill and knowledge automatically to the detail while focusing on the bigger picture.&lt;/p&gt;
&lt;p&gt;But because you acquire habits largely by imitation, and rarely question them, how do you know your habits are effective? Many of the habits that programmers have for naming, formatting, commenting and unit testing do not stand up as rational and practical on closer inspection. 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Kevlin_Henney&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kevlin Henney&lt;/a&gt; 
&lt;a href=&#34;https://twitter.com/kevlinhenney&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@kevlinhenney&lt;/a&gt; examines seven coding habits that are not as effective as programmers believe, and to suggest alternatives.&lt;/p&gt;
&lt;/blockquote&gt;








  
  


&lt;div class=&#34;gallery&#34;&gt;

  
  
  
  
    
    
    
    
    
  &lt;a data-fancybox=&#34;gallery-habits&#34; href=&#34;https://denis-trofimov.github.io/review-of-kevlin-henneys-talk-seven-ineffective-coding-habits-of-many-programmers/habits/ITT%202016%20-%20Kevlin%20Henney%20-%20Seven%20Ineffective%20Coding%20Habits%20of%20Many%20Programmers%20Code%20alignment%202.png&#34; &gt;
  &lt;img data-src=&#34;https://denis-trofimov.github.io/review-of-kevlin-henneys-talk-seven-ineffective-coding-habits-of-many-programmers/habits/_hu280ada8882d6e991cdf6d87ef052cb54_121303_b7c62e70fe43b016e397c56cd735820d.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;390&#34; height=&#34;190&#34;&gt;
  &lt;/a&gt;
  
    
    
    
    
    
  &lt;a data-fancybox=&#34;gallery-habits&#34; href=&#34;https://denis-trofimov.github.io/review-of-kevlin-henneys-talk-seven-ineffective-coding-habits-of-many-programmers/habits/ITT%202016%20-%20Kevlin%20Henney%20-%20Seven%20Ineffective%20Coding%20Habits%20of%20Many%20Programmers%20Code%20alignment%203.png&#34; &gt;
  &lt;img data-src=&#34;https://denis-trofimov.github.io/review-of-kevlin-henneys-talk-seven-ineffective-coding-habits-of-many-programmers/habits/_hue80eae6fb2724bcd2df107f3cf38bcb7_145315_7fbdc9a24fe4114b8a104dab4b0105cf.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;389&#34; height=&#34;190&#34;&gt;
  &lt;/a&gt;
  

  
&lt;/div&gt;
&lt;h1 id=&#34;seven-ineffective-coding-habits-of-many-programmers&#34;&gt;Seven Ineffective Coding Habits of Many Programmers&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;noise code&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;unsustainable spacing&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;lego naming&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;underabstraction&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;unencapsulated state&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;getters and setters&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;uncohesive tests&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/ZsHMHukIlJY&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>
