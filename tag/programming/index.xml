<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>programming | Denis Trofimov Blog</title><link>https://denis-trofimov.github.io/tag/programming/</link><atom:link href="https://denis-trofimov.github.io/tag/programming/index.xml" rel="self" type="application/rss+xml"/><description>programming</description><generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>en-us</language><lastBuildDate>Fri, 28 Sep 2018 19:12:58 +0000</lastBuildDate><image><url>https://denis-trofimov.github.io/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url><title>programming</title><link>https://denis-trofimov.github.io/tag/programming/</link></image><item><title>How dictionaries are implemented in the Python language</title><link>https://denis-trofimov.github.io/how-dictionaries-are-implemented-in-the-python-language/</link><pubDate>Fri, 28 Sep 2018 19:12:58 +0000</pubDate><guid>https://denis-trofimov.github.io/how-dictionaries-are-implemented-in-the-python-language/</guid><description>&lt;div class="story-content">
&lt;p>
This post describes how dictionaries are implemented in the Python language.
&lt;/p>
&lt;p>
This article is actually a repost of originally posted at &lt;a href="https://www.laurentluce.com/posts/python-dictionary-implementation/">Laurent Luce&amp;#8217;s Blog&lt;/a> August 29, 2011 by Laurent Luce. I mentor several students of russian &lt;a href="https://learn.python.ru/">Learn Python&lt;/a> courses. They have questions about structures in Python and how to use them. I found this post a good help to me and possibly to my students.
&lt;/p>
&lt;/div>
&lt;p>Dictionaries are indexed by keys and they can be seen as associative arrays. Let’s add 3 key/value pairs to a dictionary:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">d&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s1">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;b&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;c&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">d&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>&lt;span class="s1">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;b&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;c&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The values can be accessed this way:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;b&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;c&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;d&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Traceback&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">most&lt;/span> &lt;span class="n">recent&lt;/span> &lt;span class="n">call&lt;/span> &lt;span class="n">last&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">File&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">module&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="ne">KeyError&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;d&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The key ‘d’ does not exist so a KeyError exception is raised.&lt;/p>
&lt;h2 id="hash-tables">Hash tables&lt;/h2>
&lt;p>Python dictionaries are implemented using hash tables. It is an array whose indexes are obtained using a hash function on the keys. The goal of a hash function is to distribute the keys evenly in the array. A good hash function minimizes the number of collisions e.g. different keys having the same hash. Python does not have this kind of hash function. Its most important hash functions (for strings and ints) are very regular in common cases:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">hash&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">hash&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;namea&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;nameb&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;namec&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;named&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1658398457&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1658398460&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1658398459&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1658398462&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We are going to assume that we are using strings as keys for the rest of this post. The hash function for strings in Python is defined as:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="n">arguments&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">string&lt;/span> &lt;span class="nb">object&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">returns&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">hash&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">function&lt;/span> &lt;span class="n">string_hash&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nb">hash&lt;/span> &lt;span class="n">cached&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">it&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">set&lt;/span> &lt;span class="nb">len&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="n">string&lt;/span>&lt;span class="s1">&amp;#39;s length&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">initialize&lt;/span> &lt;span class="n">var&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="n">pointing&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="n">st&lt;/span> &lt;span class="n">char&lt;/span> &lt;span class="n">of&lt;/span> &lt;span class="n">string&lt;/span> &lt;span class="nb">object&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">set&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="n">pointed&lt;/span> &lt;span class="n">by&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="n">left&lt;/span> &lt;span class="n">shifted&lt;/span> &lt;span class="n">by&lt;/span> &lt;span class="mi">7&lt;/span> &lt;span class="n">bits&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="nb">len&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">set&lt;/span> &lt;span class="n">var&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1000003&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">xor&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="n">pointed&lt;/span> &lt;span class="n">by&lt;/span> &lt;span class="n">p&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">increment&lt;/span> &lt;span class="n">pointer&lt;/span> &lt;span class="n">p&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">set&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="n">xor&lt;/span> &lt;span class="n">length&lt;/span> &lt;span class="n">of&lt;/span> &lt;span class="n">string&lt;/span> &lt;span class="nb">object&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cache&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="nb">hash&lt;/span> &lt;span class="n">so&lt;/span> &lt;span class="n">we&lt;/span> &lt;span class="n">don&lt;/span>&lt;span class="s1">&amp;#39;t need to calculate it again&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="nb">hash&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you run hash(‘a’) in Python, it will execute string_hash() and return 12416037344. Here we assume we are using a 64-bit machine.&lt;/p>
&lt;p>If an array of size x is used to store the key/value pairs then we use a mask equal to x-1 to calculate the slot index of the pair in the array. This makes the computation of the slot index fast. The probability to find an empty slot is high due to the resizing mechanism described below. This means that having a simple computation makes sense in most of the cases. If the size of the array is 8, the index for ‘a’ will be: hash(‘a’) &amp;amp; 7 = 0. The index for ‘b’ is 3, the index for ‘c’ is 2, the index for ‘z’ is 3 which is the same as ‘b’, here we have a collision.&lt;/p>
&lt;p>
&lt;img class="alignnone" src="https://www.laurentluce.com/images/blog/dict/hash.png" alt="The hash function for strings in Python for a table size of 8" width="375" height="311" />
&lt;/p>
&lt;p>
We can see that the Python hash function does a good job when the keys are consecutive which is good because it is quite common to have this type of data to work with. However, once we add the key ‘z’, there is a collision because it is not consecutive enough.
&lt;/p>
&lt;p>
We could use a linked list to store the pairs having the same hash but it would increase the lookup time e.g. not O(1) average anymore. The next section describes the collision resolution method used in the case of Python dictionaries.
&lt;/p>
&lt;h2>
Open addressing
&lt;/h2>
&lt;p>
Open addressing is a method of collision resolution where probing is used. In case of ‘z’, the slot index 3 is already used in the array so we need to probe for a different index to find one which is not already used. Adding a key/value pair will average O(1) and the lookup operation too.
&lt;/p>
&lt;p>
A quadratic probing sequence is used to find a free slot. The code is the following:
&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">perturb&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">perturb&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;=&lt;/span> &lt;span class="n">PERTURB_SHIFT&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">use&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="n">as&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="n">next&lt;/span> &lt;span class="n">table&lt;/span> &lt;span class="n">index&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div> &lt;p>
Recurring on 5*j+1 quickly magnifies small differences in the bits that didn’t affect the initial index. The variable “perturb” gets the other bits of the hash code into play.
&lt;/p>
&lt;p>
Just out of curiosity, let’s look at the probing sequence when the table size is 32 and j = 3.&lt;br /> 3 -> 11 -> 19 -> 29 -> 5 -> 6 -> 16 -> 31 -> 28 -> 13 -> 2…
&lt;/p>
&lt;p>
You can read more about this probing sequence by looking at the source code of &lt;a href="http://svn.python.org/projects/python/trunk/Objects/dictobject.c">dictobject.c&lt;/a>. A detailed explanation of the probing mechanism can be found at the top of the file.
&lt;/p>
&lt;p>
&lt;img src="https://www.laurentluce.com/images/blog/dict/probing.png" alt="open addressing" />
&lt;/p>
&lt;p>
Now, let’s look at the Python internal code along with an example.
&lt;/p>
&lt;h2>
Dictionary C structures
&lt;/h2>
&lt;p>
The following C structure is used to store a dictionary entry: key/value pair. The hash, key and value are stored. PyObject is the base class of the Python objects.
&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Py_ssize_t&lt;/span> &lt;span class="n">me_hash&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PyObject&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">me_key&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PyObject&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">me_value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="n">PyDictEntry&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div> &lt;p>
The following structure represents a dictionary. ma_fill is the number of used slots + dummy slots. A slot is marked dummy when a key pair is removed. ma_used is the number of used slots (active). ma_mask is equal to the array’s size minus 1 and is used to calculate the slot index. ma_table is the array and ma_smalltable is the initial array of size 8.
&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">_dictobject&lt;/span> &lt;span class="n">PyDictObject&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="n">_dictobject&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PyObject_HEAD&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Py_ssize_t&lt;/span> &lt;span class="n">ma_fill&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Py_ssize_t&lt;/span> &lt;span class="n">ma_used&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Py_ssize_t&lt;/span> &lt;span class="n">ma_mask&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PyDictEntry&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">ma_table&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PyDictEntry&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">ma_lookup&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">PyDictObject&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">mp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PyObject&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">hash&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PyDictEntry&lt;/span> &lt;span class="n">ma_smalltable&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">PyDict_MINSIZE&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="dictionary-initialization">Dictionary initialization&lt;/h2>
&lt;p>
When you first create a dictionary, the function PyDict_New() is called. I removed some of the lines and converted the C code to pseudocode to concentrate on the key concepts.
&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">returns&lt;/span> &lt;span class="n">new&lt;/span> &lt;span class="n">dictionary&lt;/span> &lt;span class="n">object&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">function&lt;/span> &lt;span class="nl">PyDict_New&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">allocate&lt;/span> &lt;span class="n">new&lt;/span> &lt;span class="n">dictionary&lt;/span> &lt;span class="n">object&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">clear&lt;/span> &lt;span class="n">dictionary&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="n">s&lt;/span> &lt;span class="n">table&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">set&lt;/span> &lt;span class="n">dictionary&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="n">s&lt;/span> &lt;span class="n">number&lt;/span> &lt;span class="n">of&lt;/span> &lt;span class="n">used&lt;/span> &lt;span class="n">slots&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">dummy&lt;/span> &lt;span class="nf">slots&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ma_fill&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">set&lt;/span> &lt;span class="n">dictionary&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="n">s&lt;/span> &lt;span class="n">number&lt;/span> &lt;span class="n">of&lt;/span> &lt;span class="n">active&lt;/span> &lt;span class="nf">slots&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ma_used&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">set&lt;/span> &lt;span class="n">dictionary&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="n">s&lt;/span> &lt;span class="nf">mask&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">ma_value&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="n">dictionary&lt;/span> &lt;span class="n">size&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">7&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">set&lt;/span> &lt;span class="n">dictionary&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="n">s&lt;/span> &lt;span class="n">lookup&lt;/span> &lt;span class="n">function&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="n">lookdict_string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">allocated&lt;/span> &lt;span class="n">dictionary&lt;/span> &lt;span class="n">object&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div> &lt;h2>
Adding items
&lt;/h2>
&lt;p>
When a new key/value pair is added, PyDict_SetItem() is called. This function takes a pointer to the dictionary object and the key/value pair. It checks if the key is a string and calculates the hash or reuses the one cached if it exists. insertdict() is called to add the new key/value pair and the dictionary is resized if the number of used slots + dummy slots is greater than 2/3 of the array’s size.&lt;br /> Why 2/3? It is to make sure the probing sequence can find a free slot fast enough. We will look at the resizing function later.
&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="n">arguments&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">dictionary&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">returns&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">OK&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">function&lt;/span> &lt;span class="n">PyDict_SetItem&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="s1">&amp;#39;s hash cached:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">use&lt;/span> &lt;span class="nb">hash&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">calculate&lt;/span> &lt;span class="nb">hash&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">call&lt;/span> &lt;span class="n">insertdict&lt;/span> &lt;span class="k">with&lt;/span> &lt;span class="n">dictionary&lt;/span> &lt;span class="nb">object&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">hash&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">value&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="n">pair&lt;/span> &lt;span class="n">added&lt;/span> &lt;span class="n">successfully&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">capacity&lt;/span> &lt;span class="n">over&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">call&lt;/span> &lt;span class="n">dictresize&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="n">resize&lt;/span> &lt;span class="n">dictionary&lt;/span>&lt;span class="s1">&amp;#39;s table&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div> &lt;p>
inserdict() uses the lookup function lookdict_string() to find a free slot. This is the same function used to find a key. lookdict_string() calculates the slot index using the hash and the mask values. If it cannot find the key in the slot index = hash &amp; mask, it starts probing using the loop described above, until it finds a free slot. At the first probing try, if the key is null, it returns the dummy slot if found during the first lookup. This gives priority to re-use the previously deleted slots.
&lt;/p>
&lt;p>
We want to add the following key/value pairs: {‘a’: 1, ‘b’: 2′, ‘z’: 26, ‘y’: 25, ‘c’: 5, ‘x’: 24}. This is what happens:
&lt;/p>
&lt;p>
A dictionary structure is allocated with internal table size of 8.
&lt;/p>
&lt;ul>
&lt;li>PyDict_SetItem: key = &amp;#8216;a&amp;#8217;, value = 1&lt;/li>
&lt;ul>
&lt;li>hash = hash(&amp;#8216;a&amp;#8217;) = 12416037344&lt;/li>
&lt;li>insertdict&lt;/li>
&lt;ul>
&lt;li>lookdict_string&lt;/li>
&lt;ul>
&lt;li>slot index = hash &amp;#038; mask = 12416037344 &amp;#038; 7 = 0&lt;/li>
&lt;li>slot 0 is not used so return it&lt;/li>
&lt;/ul>
&lt;li>init entry at index 0 with key, value and hash&lt;/li>
&lt;li>ma_used = 1, ma_fill = 1&lt;/li>
&lt;/ul>
&lt;/ul>
&lt;li>PyDict_SetItem: key = &amp;#8216;b&amp;#8217;, value = 2&lt;/li>
&lt;ul>
&lt;li>hash = hash(&amp;#8216;b&amp;#8217;) = 12544037731&lt;/li>
&lt;li>insertdict&lt;/li>
&lt;ul>
&lt;li>lookdict_string&lt;/li>
&lt;ul>
&lt;li>slot index = hash &amp;#038; mask = 12544037731 &amp;#038; 7 = 3&lt;/li>
&lt;li>slot 3 is not used so return it&lt;/li>
&lt;/ul>
&lt;li>init entry at index 3 with key, value and hash&lt;/li>
&lt;li>ma_used = 2, ma_fill = 2&lt;/li>
&lt;/ul>
&lt;/ul>
&lt;li>PyDict_SetItem: key = &amp;#8216;z&amp;#8217;, value = 26&lt;/li>
&lt;ul>
&lt;li>hash = hash(&amp;#8216;z&amp;#8217;) = 15616046971&lt;/li>
&lt;li>insertdict&lt;/li>
&lt;ul>
&lt;li>lookdict_string&lt;/li>
&lt;ul>
&lt;li>slot index = hash &amp;#038; mask = 15616046971 &amp;#038; 7 = 3&lt;/li>
&lt;li>slot 3 is used so probe for a different slot: 5 is free&lt;/li>
&lt;/ul>
&lt;li>init entry at index 5 with key, value and hash&lt;/li>
&lt;li>ma_used = 3, ma_fill = 3&lt;/li>
&lt;/ul>
&lt;/ul>
&lt;li>PyDict_SetItem: key = &amp;#8216;y&amp;#8217;, value = 25&lt;/li>
&lt;ul>
&lt;li>hash = hash(&amp;#8216;y&amp;#8217;) = 15488046584&lt;/li>
&lt;li>insertdict&lt;/li>
&lt;ul>
&lt;li>lookdict_string&lt;/li>
&lt;ul>
&lt;li>slot index = hash &amp;#038; mask = 15488046584 &amp;#038; 7 = 0&lt;/li>
&lt;li>slot 0 is used so probe for a different slot: 1 is free&lt;/li>
&lt;/ul>
&lt;li>init entry at index 1 with key, value and hash&lt;/li>
&lt;li>ma_used = 4, ma_fill = 4&lt;/li>
&lt;/ul>
&lt;/ul>
&lt;li>PyDict_SetItem: key = &amp;#8216;c&amp;#8217;, value = 3&lt;/li>
&lt;ul>
&lt;li>hash = hash(&amp;#8216;c&amp;#8217;) = 12672038114&lt;/li>
&lt;li>insertdict&lt;/li>
&lt;ul>
&lt;li>lookdict_string&lt;/li>
&lt;ul>
&lt;li>slot index = hash &amp;#038; mask = 12672038114 &amp;#038; 7 = 2&lt;/li>
&lt;li>slot 2 is free so return it&lt;/li>
&lt;/ul>
&lt;li>init entry at index 2 with key, value and hash&lt;/li>
&lt;li>ma_used = 5, ma_fill = 5&lt;/li>
&lt;/ul>
&lt;/ul>
&lt;li>PyDict_SetItem: key = &amp;#8216;x&amp;#8217;, value = 24&lt;/li>
&lt;ul>
&lt;li>hash = hash(&amp;#8216;x&amp;#8217;) = 15360046201&lt;/li>
&lt;li>insertdict&lt;/li>
&lt;ul>
&lt;li>lookdict_string&lt;/li>
&lt;ul>
&lt;li>slot index = hash &amp;#038; mask = 15360046201 &amp;#038; 7 = 1&lt;/li>
&lt;li>slot 1 is used so probe for a different slot: 7 is free&lt;/li>
&lt;/ul>
&lt;li>init entry at index 7 with key, value and hash&lt;/li>
&lt;li>ma_used = 6, ma_fill = 6&lt;/li>
&lt;/ul>
&lt;/ul>
&lt;/ul>
&lt;p>
This is what we have so far:
&lt;/p>
&lt;p>
&lt;img src="https://www.laurentluce.com/images/blog/dict/insert.png" alt="python dictionary insert" />
&lt;/p>
&lt;p>
6 slots on 8 are used now so we are over 2/3 of the array’s capacity. dictresize() is called to allocate a larger array. This function also takes care of copying the old table entries to the new table.
&lt;/p>
&lt;p>
dictresize() is called with minused = 24 in our case which is 4 * ma_used. 2 * ma_used is used when the number of used slots is very large (greater than 50000). Why 4 times the number of used slots? It reduces the number of resize steps and it increases sparseness.
&lt;/p>
&lt;p>
The new table size needs to be greater than 24 and it is calculated by shifting the current size 1 bit left until it is greater than 24. It ends up being 32 e.g. 8 -> 16 -> 32.
&lt;/p>
&lt;p>
This is what happens with our table during resizing: a new table of size 32 is allocated. Old table entries are inserted into the new table using the new mask value which is 31. We end up with the following:
&lt;/p>
&lt;p>
&lt;img src="https://www.laurentluce.com/images/blog/dict/resizing.png" alt="python dictionary table resizing" />
&lt;/p>
&lt;h2>
Removing items
&lt;/h2>
&lt;p>
PyDict_DelItem() is called to remove an entry. The hash for this key is calculated and the lookup function is called to return the entry. The slot is now a dummy slot.
&lt;/p>
&lt;p>
We want to remove the key ‘c’ from our dictionary. We end up with the following array:
&lt;/p>
&lt;p>
&lt;img src="https://www.laurentluce.com/images/blog/dict/delete.png" alt="Python dictionary delete key" />
&lt;/p>
&lt;p>
Note that the delete item operation doesn’t trigger an array resize if the number of used slots is much less that the total number of slots. However, when a key/value pair is added, the need for resize is based on the number of used slots + dummy slots so it can shrink the array too.
&lt;/p>
&lt;p>
That’s it for now. I hope you enjoyed the article. Please write a comment if you have any feedback.
&lt;/p>
&lt;/div>
&lt;!--more-->
&lt;!--more-->
&lt;div class="metawrap">
&lt;p>
&amp;nbsp;
&lt;/p>
&lt;p>
&lt;em>Originally posted at &lt;a href="https://www.laurentluce.com/posts/python-dictionary-implementation/">Laurent Luce&amp;#8217;s Blog&lt;/a> August 29, 2011 by Laurent Luce.&lt;/em>
&lt;/p>
&lt;/div></description></item><item><title>Getting Mob Programming Buy-In at Your Organization</title><link>https://denis-trofimov.github.io/getting-mob-programming-buy-in-at-your-organization/</link><pubDate>Fri, 14 Sep 2018 22:17:50 +0000</pubDate><guid>https://denis-trofimov.github.io/getting-mob-programming-buy-in-at-your-organization/</guid><description>&lt;p>Repost of &lt;a href="https://simpleprogrammer.com/mob-programming/">&lt;a href="https://simpleprogrammer.com/mob-programming/" target="_blank" rel="noopener">https://simpleprogrammer.com/mob-programming/&lt;/a>.&lt;/a>&lt;/p>
&lt;p>
&lt;figure id="figure-this-piece-was-a-collaboration-written-by-nate-wixom-and-torrey-powell">
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://spzone-simpleprogrammer.netdna-ssl.com/wp-content/uploads/2018/09/mod-square.png" alt="This piece was a collaboration written by Nate Wixom and Torrey Powell." loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;figcaption>
This piece was a collaboration written by Nate Wixom and Torrey Powell.
&lt;/figcaption>&lt;/figure>
&lt;/p>
&lt;p>Mob programming is the best approach for many development applications. Mob projects result in a more finished project at release, with fewer bugs. By focusing on one project at a time, teams can complete projects more efficiently, and those projects are higher quality, requiring fewer revisions.&lt;/p>
&lt;p>The Project Management Institute’s &lt;a href="https://www.pmi.org/-/media/pmi/documents/public/pdf/learning/thought-leadership/pulse/pulse-of-the-profession-2017.pdf" target="_blank" rel="noopener">2017 Pulse of the Profession&lt;/a> survey reports that 71 percent of organizations now use &lt;a href="https://www.cio.com/article/3156998/agile-development/agile-project-management-a-beginners-guide.html" target="_blank" rel="noopener">agile methods&lt;/a> to complete projects. Included among agile approaches is mob programming, &lt;a href="https://www.agilealliance.org/glossary/mob-programming/" target="_blank" rel="noopener">defined by the Agile Alliance&lt;/a> as “a software development approach where the whole team works on the same thing, at the same time, in the same space, and at the same computer.” Picture multiple engineers at one station working collaboratively on one project.&lt;/p>
&lt;p>While many organizations have adopted mob programming as a core part of their development skill set, not all development organizations have bought in.&lt;/p>
&lt;p>Still, to implement mob programming successfully, you need buy-in from two important groups at your organization—the executive team and the programmers themselves.&lt;/p>
&lt;p>By following the strategies below, you can get organization buy-in for mob programming from top to bottom and start using this agile development methodology to provide superior finished products for clients both inside and outside your organization.&lt;/p>
&lt;h2 id="getting-buy-in-from-leadership">Getting Buy-in From Leadership&lt;/h2>
&lt;p>As far back as 2000, the benefits of developers teaming up on projects to solve problems have been evaluated against the performance of individuals. An oft-cited &lt;a href="http://sunnyday.mit.edu/16.355/williams.pdf" target="_blank" rel="noopener">joint study&lt;/a> between the University of North Carolina and the University of Utah showed that paired programmers were 15 percent more successful in solving problems and that their solutions did so with fewer lines of code.&lt;/p>
&lt;p>That may not be an impressive enough statistic for senior leadership, however. Shouldn’t it be at least 100 percent more efficient in order to be cost-effective?&lt;/p>
&lt;p>The truth of the matter is that such small efficiency gains in the short run may not be convincing. It’s a long game, and you’ll need to open leadership’s eyes to the possibilities of multiple projects spanning months, even years.&lt;/p>
&lt;p>If you can get leadership to agree to a six- to 12-month trial for mob programming, here are some of the benefits your organization will see:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Fully inventoried projects:&lt;/strong> With groups working more thoroughly and quickly on fewer projects, projects are less likely to be abandoned or forgotten, and more projects are fully completed. More eyes on every project means projects are more complete when they are released to the world.&lt;/li>
&lt;li>&lt;strong>Shorter turnaround on projects:&lt;/strong> Projects are completed quicker than when worked on by individual developers. With more eyes on each project, roadblocks are more easily overcome, and solutions to problems can quickly be brainstormed.&lt;/li>
&lt;li>&lt;strong>Fewer issues in live projects:&lt;/strong> As the projects are fully inventoried with more people reviewing every line of code, fewer bugs make it to the production environment. With individual developers working on projects, it’s often understood that there will be bugs that need to be fixed while a platform is live. You can eliminate a lot of this necessary rework through mob programming.&lt;/li>
&lt;li>&lt;strong>Quicker onboarding for programmers:&lt;/strong> Onboarding into a mob programming environment is more efficient, as you can drop new developers right into a mob that’s already at work on a project and get them contributing immediately rather than having to divert resources for training and management of new programmers’ early projects with your organization.&lt;/li>
&lt;/ul>
&lt;p>Over time, mob programming improves efficiency not only in the completion of successful projects but also in the integration of &lt;a href="https://simpleprogrammer.com/working-on-a-team/" target="_blank" rel="noopener">new team members&lt;/a>. You may not see the return on investment right away, but over time, it will be evident.&lt;/p>
&lt;p>Better results, faster, with fewer abandoned projects—that’s something any senior leader can get behind.&lt;/p>
&lt;h2 id="getting-buy-in-from-programmers-developers-and-engineers">Getting Buy-in From Programmers, Developers, and Engineers&lt;/h2>
&lt;p>
&lt;figure id="figure-getting-buy-in-from-senior-leadership-is-one-thing-getting-buy-in-from-the-people-who-will-actually-be-doing-the-mob-programming-is-something-else-entirely">
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://spzone-simpleprogrammer.netdna-ssl.com/wp-content/uploads/2018/09/team-work.png" alt="Getting buy-in from senior leadership is one thing. Getting buy-in from the people who will actually be doing the mob programming is something else entirely." loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;figcaption>
Getting buy-in from senior leadership is one thing. Getting buy-in from the people who will actually be doing the mob programming is something else entirely.
&lt;/figcaption>&lt;/figure>
&lt;/p>
&lt;p>Many engineers, developers, and programmers are used to &lt;a href="https://simpleprogrammer.com/importance-community-cant-alone/" target="_blank" rel="noopener">working alone&lt;/a>—putting on the headphones and sitting down to crank out code, cut off from the outside world, for hours at a time. How do you get people who are used to working alone to be active participants in a group environment where the major reason for increased success is teamwork?&lt;/p>
&lt;p>In our experience, having gone through many iterations of mob programming while integrating it into the organization at Clearlink, not everyone is a good fit for mob programming—but many more than you would expect actually are, once they are involved.&lt;/p>
&lt;p>Why is that? Believe it or not, engineers like socializing with their colleagues, they just haven’t always had the chance to do so. Once they realize the level of engagement and the quality of code that is created while working collaboratively, job satisfaction increases, learning increases, and enhanced team bonding occurs. Mob programming is also a meritocracy where the best idea wins, and everyone in the mob has an equal voice—from the most senior developer on the team down to the newest arrival.&lt;/p>
&lt;p>Each mob contains two roles: &lt;em>the driver&lt;/em> and &lt;em>the navigator(s)&lt;/em>. The driver sits at the computer, inputting the code, while the navigators tell the driver what to type. These roles switch in the mob at regular eight to 15-minute intervals, giving everyone an equal chance to drive and to navigate.&lt;/p>
&lt;p>Everyone remains actively involved in the process, with ideas being shared and implemented quickly. Since everyone gets a chance to navigate, junior programmers gain confidence by asserting their ideas.&lt;/p>
&lt;p>We recommend, either at the completion of a project or at the end of each workweek, recognizing mob team members for their contributions to the project(s) they have worked on. Also, allow programmers to share what they learned and what they had trouble with. After a few projects and a few of these recognition and retrospective meetings, your team members will be comfortable working together and fully integrated into the mob programming mindset.&lt;/p>
&lt;h2 id="making-the-jump">Making the Jump&lt;/h2>
&lt;p>Changing development work from an individual to a mob programming style can be a big leap—one that can result in a few stumbles along the way. But once you get buy-in from leadership for a trial and can get some programmers on board, you’ll see &lt;a href="http://agileuprising.libsyn.com/mob-programming-lessons-learned-at-clearlinkcom" target="_blank" rel="noopener">how it can benefit your organization&lt;/a>.&lt;/p>
&lt;p>We’ve given you some navigation—so get ready to drive.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://flic.kr/p/nYis2p" target="_blank" rel="noopener">Photo&lt;/a> by &lt;a class="owner-name truncate" title="Go to Georgia National Guard's photostream" href="https://www.flickr.com/photos/ganatlguard/" data-track="attributionNameClick" data-rapid_p="86">Georgia National Guard&lt;/a> CC 2.0&lt;/li>
&lt;/ul></description></item><item><title>Review of Kevlin Henney`s talk Seven Ineffective Coding Habits of Many Programmers</title><link>https://denis-trofimov.github.io/review-of-kevlin-henneys-talk-seven-ineffective-coding-habits-of-many-programmers/</link><pubDate>Sun, 09 Sep 2018 20:03:20 +0000</pubDate><guid>https://denis-trofimov.github.io/review-of-kevlin-henneys-talk-seven-ineffective-coding-habits-of-many-programmers/</guid><description>&lt;p>&lt;em>I watched this video from the start till the end.&lt;/em>
&lt;em>I see this coding habits very often.&lt;/em>
&lt;em>I fought unsustainable spacing the wrong way in the past.&lt;/em>&lt;/p>
&lt;h2 id="kevlin-henneys-talk-video-description">Kevlin Henney`s talk video description&lt;/h2>
&lt;blockquote>
&lt;p>Habits help you manage the code complexity. You apply existing skill and knowledge automatically to the detail while focusing on the bigger picture.&lt;/p>
&lt;p>But because you acquire habits largely by imitation, and rarely question them, how do you know your habits are effective? Many of the habits that programmers have for naming, formatting, commenting and unit testing do not stand up as rational and practical on closer inspection. &lt;a href="https://en.wikipedia.org/wiki/Kevlin_Henney" target="_blank" rel="noopener">Kevlin Henney&lt;/a> &lt;a href="https://twitter.com/kevlinhenney" target="_blank" rel="noopener">@kevlinhenney&lt;/a> examines seven coding habits that are not as effective as programmers believe, and to suggest alternatives.&lt;/p>
&lt;/blockquote>
&lt;h2 id="seven-ineffective-coding-habits-of-many-programmers">Seven Ineffective Coding Habits of Many Programmers&lt;/h2>
&lt;ol>
&lt;li>
&lt;blockquote>
&lt;p>noise code&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;blockquote>
&lt;p>unsustainable spacing&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;blockquote>
&lt;p>lego naming&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;blockquote>
&lt;p>underabstraction&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;blockquote>
&lt;p>unencapsulated state&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;blockquote>
&lt;p>getters and setters&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;blockquote>
&lt;p>uncohesive tests&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ol>
&lt;h2 id="screenshots">Screenshots&lt;/h2>
&lt;div class="gallery-grid">
&lt;div class="gallery-item gallery-item--medium">
&lt;a data-fancybox="gallery-2018-09-09-review-of-kevlin-henneys-talk-seven-ineffective-coding-habits-of-many-programmers" href="https://denis-trofimov.github.io/media/albums/2018-09-09-review-of-kevlin-henneys-talk-seven-ineffective-coding-habits-of-many-programmers/ITT%202016%20-%20Kevlin%20Henney%20-%20Seven%20Ineffective%20Coding%20Habits%20of%20Many%20Programmers%20Code%20alignment%202.png" >
&lt;img src="https://denis-trofimov.github.io/media/albums/2018-09-09-review-of-kevlin-henneys-talk-seven-ineffective-coding-habits-of-many-programmers/_hu280ada8882d6e991cdf6d87ef052cb54_121303_3409545b713dde9fe80cd8405ffa0329.webp" loading="lazy" alt="ITT 2016 - Kevlin Henney - Seven Ineffective Coding Habits of Many Programmers Code alignment 2.png" width="750" height="366">
&lt;/a>
&lt;/div>
&lt;div class="gallery-item gallery-item--medium">
&lt;a data-fancybox="gallery-2018-09-09-review-of-kevlin-henneys-talk-seven-ineffective-coding-habits-of-many-programmers" href="https://denis-trofimov.github.io/media/albums/2018-09-09-review-of-kevlin-henneys-talk-seven-ineffective-coding-habits-of-many-programmers/ITT%202016%20-%20Kevlin%20Henney%20-%20Seven%20Ineffective%20Coding%20Habits%20of%20Many%20Programmers%20Code%20alignment%203.png" >
&lt;img src="https://denis-trofimov.github.io/media/albums/2018-09-09-review-of-kevlin-henneys-talk-seven-ineffective-coding-habits-of-many-programmers/_hue80eae6fb2724bcd2df107f3cf38bcb7_145315_9666e656dfc0e4c3c51fe72a389fed35.webp" loading="lazy" alt="ITT 2016 - Kevlin Henney - Seven Ineffective Coding Habits of Many Programmers Code alignment 3.png" width="750" height="367">
&lt;/a>
&lt;/div>
&lt;/div>
&lt;h2 id="source">Source&lt;/h2>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/ZsHMHukIlJY" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div></description></item></channel></rss>